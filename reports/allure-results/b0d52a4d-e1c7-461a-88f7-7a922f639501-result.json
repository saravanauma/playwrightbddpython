{"name": "test_auth_login", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: BrowserType.launch: Executable doesn't exist at /Users/saravanakumar.veluchamy/Library/Caches/ms-playwright/chromium-1187/chrome-mac/Chromium.app/Contents/MacOS/Chromium\n╔════════════════════════════════════════════════════════════╗\n║ Looks like Playwright was just installed or updated.       ║\n║ Please run the following command to download new browsers: ║\n║                                                            ║\n║     playwright install                                     ║\n║                                                            ║\n║ <3 Playwright Team                                         ║\n╚════════════════════════════════════════════════════════════╝", "trace": "self = <FixtureRequest for <Function test_auth_login>>, argname = 'page'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n    \n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n        # Note that in addition to the use case described in the docstring,\n        # getfixturevalue() is also called by pytest itself during item and fixture\n        # setup to evaluate the fixtures that are requested statically\n        # (using function parameters, autouse, etc).\n    \n>       fixturedef = self._get_active_fixturedef(argname)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:640: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:1084: in execute\n    fixturedef = request._get_active_fixturedef(argname)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:640: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:1128: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/pluggy/_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/pluggy/_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/pluggy/_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\nvenv/lib/python3.13/site-packages/pluggy/_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/pluggy/_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\nvenv/lib/python3.13/site-packages/_pytest/setuponly.py:36: in pytest_fixture_setup\n    return (yield)\n            ^^^^^\nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:1196: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.13/site-packages/_pytest/fixtures.py:923: in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\nconftest.py:20: in browser\n    browser = p.chromium.launch(\nvenv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:14502: in launch\n    self._sync(\nvenv/lib/python3.13/site-packages/playwright/_impl/_browser_type.py:98: in launch\n    await self._channel.send(\nvenv/lib/python3.13/site-packages/playwright/_impl/_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x1087917f0>\ncb = <function Channel.send.<locals>.<lambda> at 0x1087dd800>, is_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: BrowserType.launch: Executable doesn't exist at /Users/saravanakumar.veluchamy/Library/Caches/ms-playwright/chromium-1187/chrome-mac/Chromium.app/Contents/MacOS/Chromium\nE           ╔════════════════════════════════════════════════════════════╗\nE           ║ Looks like Playwright was just installed or updated.       ║\nE           ║ Please run the following command to download new browsers: ║\nE           ║                                                            ║\nE           ║     playwright install                                     ║\nE           ║                                                            ║\nE           ║ <3 Playwright Team                                         ║\nE           ╚════════════════════════════════════════════════════════════╝\n\nvenv/lib/python3.13/site-packages/playwright/_impl/_connection.py:558: Error"}, "description": "../features/auth_login.feature: login to the application", "start": 1761739848975, "stop": 1761739849401, "uuid": "2a0c2a0d-8c02-416d-8f5a-d53bcebb52b2", "historyId": "110b02b7c1906ad4b86ad564cd287339", "testCaseId": "110b02b7c1906ad4b86ad564cd287339", "fullName": "tests.e2e.steps.test_auth_login_steps#test_auth_login", "labels": [{"name": "parentSuite", "value": "tests.e2e.steps"}, {"name": "suite", "value": "test_auth_login_steps"}, {"name": "host", "value": "Saravanakumars-MT202001-0097.local"}, {"name": "thread", "value": "5003-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.e2e.steps.test_auth_login_steps"}], "titlePath": ["tests", "e2e", "steps", "test_auth_login_steps.py"]}